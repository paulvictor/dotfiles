(define-module (passdo)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 ftw)
  #:use-module (ice-9 string-fun)
  #:use-module (ice-9 rdelim))


(let* ((port (open-input-pipe "date --utc"))
       (str  (read-line port))) ; from (ice-9 rdelim)
  (close-pipe port)
  str)

(define (collect-gpg-files file-path)
  (let* ((enter? (lambda (name stat res)
                   (not (equal? (basename name) ".git"))))
         (without-prefix (lambda (fname)
                           (string-replace-substring fname file-path "")))
         (without-suffix (lambda (fname)
                           (string-replace-substring fname ".gpg" "")))
         (sanitized-name (compose without-prefix without-suffix))
         (leaf (lambda (name stat res)
                 (cons (sanitized-name name) res)))
         (down (lambda (name stat result)
                 result))
         (error (lambda (name stat errno result)
                  (result))))
    (file-system-fold enter? leaf down down down error '() file-path)))

(define (main)
  (let* ((store-dir (getenv "PASSWORD_STORE_DIR"))
         (file-list (collect-gpg-files store-dir))
         (rofi-command (string-append "rofi -i -matching fuzzy -dmenu")))
    (display file-list)
    (let* ((port (open-input-pipe (string-append rofi-command )))))
    (open-input-output-pipe )))
